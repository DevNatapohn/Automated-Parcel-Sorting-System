#!/usr/bin/env python3
"""
Complete Pipeline Controller
Camera ‚Üí OCR Processing ‚Üí Dobot Sorting ‚Üí Database
"""

import os
import time
import threading
from queue import Queue
from datetime import datetime
from dotenv import load_dotenv

# Import modules
from camera import ParcelCamera
from process import CompleteParcelSortingSystem
from dobot_controller import DobotController


class CompleteSortingPipeline:
    """‡∏£‡∏∞‡∏ö‡∏ö Pipeline ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£: Camera ‚Üí OCR ‚Üí Dobot ‚Üí Database"""
    
    def __init__(self, config: dict = None):
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤ configuration
        load_dotenv()
        
        self.config = config or {}
        
        # --- API Keys ---
        self.typhoon_api_key = self.config.get('typhoon_api_key') or os.getenv("TYPHOON_API_KEY")
        self.db_api_url = self.config.get('db_api_url') or os.getenv("DB_API_URL")
        self.db_api_key = self.config.get('db_api_key') or os.getenv("DB_API_KEY")
        
        # --- Folders ---
        self.image_folder = self.config.get('image_folder', "parcel_images")
        self.output_folder = self.config.get('output_folder', "parcel_results")
        
        # --- Camera Settings ---
        self.camera_index = self.config.get('camera_index', 0)
        self.auto_capture = self.config.get('auto_capture', False)
        
        # --- OCR Settings ---
        self.enhance_images = self.config.get('enhance_images', True)
        self.save_to_db = self.config.get('save_to_db', False)
        
        # --- Dobot Settings ---
        self.enable_dobot = self.config.get('enable_dobot', True)
        self.dobot_port = self.config.get('dobot_port', 'COM5')
        self.dobot_speed = self.config.get('dobot_speed', 100)
        self.dobot_simulation = self.config.get('dobot_simulation', False)
        
        # --- Processing Settings ---
        self.auto_process = self.config.get('auto_process', True)
        self.process_interval = self.config.get('process_interval', 2)
        
        # --- Queues ---
        self.ocr_queue = Queue()      # Queue ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OCR
        self.dobot_queue = Queue()    # Queue ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Dobot
        
        # --- Components ---
        self.camera = None
        self.ocr_processor = None
        self.dobot_controller = None
        
        # --- Threading ---
        self.ocr_thread = None
        self.dobot_thread = None
        self.monitor_thread = None
        self.is_running = False
        
        # --- Statistics ---
        self.stats = {
            'images_captured': 0,
            'ocr_processed': 0,
            'ocr_success': 0,
            'ocr_failed': 0,
            'dobot_sorted': 0,
            'dobot_failed': 0,
            'db_saved': 0,
            'db_failed': 0
        }
    
    def validate_configuration(self) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"""
        print("\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤...")
        print("="*60)
        
        errors = []
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Typhoon API
        if not self.typhoon_api_key:
            errors.append("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö TYPHOON_API_KEY")
        else:
            print(f"‚úÖ Typhoon API: {'*' * 20}{self.typhoon_api_key[-4:]}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Database (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ)
        if self.save_to_db:
            if not self.db_api_url:
                errors.append("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö DB_API_URL (‡∏Ç‡πâ‡∏≤‡∏° Database)")
                self.save_to_db = False
            else:
                print(f"‚úÖ Database: {self.db_api_url}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Dobot (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ)
        if self.enable_dobot:
            print(f"‚úÖ Dobot: Port {self.dobot_port}, Speed {self.dobot_speed}%")
            if self.dobot_simulation:
                print("   ‚ö†Ô∏è  ‡πÇ‡∏´‡∏°‡∏î: SIMULATION (‡πÑ‡∏°‡πà‡∏ï‡πà‡∏≠ Dobot ‡∏à‡∏£‡∏¥‡∏á)")
        else:
            print("‚ö†Ô∏è  Dobot: ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
        for folder in [self.image_folder, self.output_folder]:
            if not os.path.exists(folder):
                os.makedirs(folder)
                print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {folder}/")
            else:
                print(f"‚úÖ ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {folder}/")
        
        print("="*60)
        
        if errors:
            print("\n‚ö†Ô∏è  ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:")
            for error in errors:
                print(f"   {error}")
            return False
        
        print("‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        return True
    
    def initialize_components(self):
        """‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        print("\nüöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏∞‡∏ö‡∏ö...")
        print("="*60)
        
        # 1. ‡∏Å‡∏•‡πâ‡∏≠‡∏á
        print("üì∑ [1/3] ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á...")
        self.camera = ParcelCamera(
            output_folder=self.image_folder,
            camera_index=self.camera_index,
            auto_capture=self.auto_capture
        )
        
        # 2. OCR Processor
        print("üîç [2/3] ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏∞‡∏ö‡∏ö OCR...")
        self.ocr_processor = CompleteParcelSortingSystem(
            typhoon_api_key=self.typhoon_api_key,
            output_folder=self.output_folder,
            db_api_url=self.db_api_url if self.save_to_db else None,
            db_api_key=self.db_api_key if self.save_to_db else None
        )
        
        # 3. Dobot Controller
        if self.enable_dobot:
            print("ü§ñ [3/3] ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Dobot Controller...")
            self.dobot_controller = DobotController(
                port=self.dobot_port,
                speed=self.dobot_speed,
                simulation_mode=self.dobot_simulation
            )
            
            # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Dobot
            success = self.dobot_controller.connect()
            if not success and not self.dobot_simulation:
                print("   ‚ö†Ô∏è  ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Simulation Mode")
        else:
            print("‚ö†Ô∏è  [3/3] ‡∏Ç‡πâ‡∏≤‡∏° Dobot Controller")
        
        print("="*60)
        print("‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå")
    
    def ocr_worker(self):
        """Worker Thread: ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• OCR"""
        print("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏° OCR Worker Thread")
        
        while self.is_running:
            try:
                if not self.ocr_queue.empty():
                    image_path = self.ocr_queue.get()
                    
                    print(f"\n{'='*60}")
                    print(f"üîç OCR: {os.path.basename(image_path)}")
                    print(f"{'='*60}")
                    
                    # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• OCR
                    result = self.ocr_processor.process_single_parcel(
                        image_path=image_path,
                        enhance_image=self.enhance_images,
                        save_to_db=self.save_to_db
                    )
                    
                    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
                    self.stats['ocr_processed'] += 1
                    
                    if result['success']:
                        self.stats['ocr_success'] += 1
                        
                        province = result.get('province')
                        tracking = result.get('tracking_number')
                        
                        print(f"\n‚úÖ OCR ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                        print(f"   üì¶ Tracking: {tracking}")
                        print(f"   üìç ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á: {province}")
                        
                        if result.get('db_saved'):
                            self.stats['db_saved'] += 1
                            print(f"   üíæ Database ID: {result['db_parcel_id']}")
                        
                        # ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á Dobot Queue
                        if self.enable_dobot and province and province != '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏':
                            self.dobot_queue.put({
                                'image_path': image_path,
                                'province': province,
                                'tracking': tracking,
                                'result': result
                            })
                            print(f"   ü§ñ ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á Dobot Queue")
                        else:
                            print(f"   ‚ö†Ô∏è  ‡∏Ç‡πâ‡∏≤‡∏° Dobot (‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ)")
                    
                    else:
                        self.stats['ocr_failed'] += 1
                        print(f"\n‚ùå OCR ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {result.get('error')}")
                    
                    self.ocr_queue.task_done()
                    self.print_stats()
                
                else:
                    time.sleep(0.5)
            
            except Exception as e:
                print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô OCR Worker: {e}")
                import traceback
                traceback.print_exc()
                time.sleep(1)
        
        print("üõë ‡∏´‡∏¢‡∏∏‡∏î OCR Worker Thread")
    
    def dobot_worker(self):
        """Worker Thread: ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Dobot"""
        print("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏° Dobot Worker Thread")
        
        while self.is_running:
            try:
                if not self.dobot_queue.empty():
                    parcel_data = self.dobot_queue.get()
                    
                    province = parcel_data['province']
                    tracking = parcel_data['tracking']
                    
                    print(f"\n{'='*60}")
                    print(f"ü§ñ Dobot: ‡∏Ñ‡∏±‡∏î‡πÅ‡∏¢‡∏Å‡∏û‡∏±‡∏™‡∏î‡∏∏ {tracking} ‚Üí {province}")
                    print(f"{'='*60}")
                    
                    # ‡∏™‡∏±‡πà‡∏á‡∏á‡∏≤‡∏ô Dobot
                    success = self.dobot_controller.pick_and_place(province)
                    
                    if success:
                        self.stats['dobot_sorted'] += 1
                        print(f"‚úÖ Dobot ‡∏Ñ‡∏±‡∏î‡πÅ‡∏¢‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                        
                        # ‡∏¢‡πâ‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÑ‡∏õ processed
                        self.move_to_processed(parcel_data['image_path'])
                    else:
                        self.stats['dobot_failed'] += 1
                        print(f"‚ùå Dobot ‡∏Ñ‡∏±‡∏î‡πÅ‡∏¢‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
                    
                    # ‡∏Å‡∏•‡∏±‡∏ö Home
                    self.dobot_controller.move_home("‡∏£‡∏≠‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏ä‡∏¥‡πâ‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ")
                    
                    self.dobot_queue.task_done()
                    self.print_stats()
                
                else:
                    time.sleep(0.5)
            
            except Exception as e:
                print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô Dobot Worker: {e}")
                import traceback
                traceback.print_exc()
                time.sleep(1)
        
        print("üõë ‡∏´‡∏¢‡∏∏‡∏î Dobot Worker Thread")
    
    def monitor_new_images(self):
        """Monitor Thread: ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà"""
        print("üëÅÔ∏è  ‡πÄ‡∏£‡∏¥‡πà‡∏° Image Monitor Thread")
        
        processed_files = set()
        
        while self.is_running:
            try:
                current_files = set()
                
                if os.path.exists(self.image_folder):
                    for filename in os.listdir(self.image_folder):
                        if filename.lower().endswith(('.jpg', '.jpeg', '.png', '.bmp')):
                            current_files.add(filename)
                
                new_files = current_files - processed_files
                
                if new_files:
                    for filename in sorted(new_files):
                        filepath = os.path.join(self.image_folder, filename)
                        
                        if os.path.exists(filepath):
                            time.sleep(0.5)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
                            
                            self.ocr_queue.put(filepath)
                            processed_files.add(filename)
                            self.stats['images_captured'] += 1
                            
                            print(f"\nüì∏ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà: {filename}")
                            print(f"   üìã OCR Queue: {self.ocr_queue.qsize()}")
                            print(f"   ü§ñ Dobot Queue: {self.dobot_queue.qsize()}")
                
                time.sleep(self.process_interval)
            
            except Exception as e:
                print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô Monitor Thread: {e}")
                time.sleep(1)
        
        print("üõë ‡∏´‡∏¢‡∏∏‡∏î Image Monitor Thread")
    
    def move_to_processed(self, image_path: str):
        """‡∏¢‡πâ‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå processed"""
        try:
            processed_folder = os.path.join(self.image_folder, "processed")
            if not os.path.exists(processed_folder):
                os.makedirs(processed_folder)
            
            filename = os.path.basename(image_path)
            dest_path = os.path.join(processed_folder, filename)
            
            if os.path.exists(image_path):
                os.rename(image_path, dest_path)
                print(f"   üìÅ ‡∏¢‡πâ‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÑ‡∏õ: processed/{filename}")
        
        except Exception as e:
            print(f"   ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≤‡∏¢‡∏†‡∏≤‡∏û: {e}")
    
    def print_stats(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥"""
        print(f"\n{'='*60}")
        print(f"üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        print(f"{'='*60}")
        print(f"üì∏ ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢:       {self.stats['images_captured']}")
        print(f"üîç OCR ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•:     {self.stats['ocr_processed']}")
        print(f"   ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:         {self.stats['ocr_success']}")
        print(f"   ‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:       {self.stats['ocr_failed']}")
        
        if self.enable_dobot:
            print(f"ü§ñ Dobot ‡∏Ñ‡∏±‡∏î‡πÅ‡∏¢‡∏Å:     {self.stats['dobot_sorted']}")
            print(f"   ‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:       {self.stats['dobot_failed']}")
        
        if self.save_to_db:
            print(f"üíæ Database:         {self.stats['db_saved']} (‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {self.stats['db_failed']})")
        
        print(f"üìã ‡∏£‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•:")
        print(f"   OCR Queue:        {self.ocr_queue.qsize()}")
        if self.enable_dobot:
            print(f"   Dobot Queue:      {self.dobot_queue.qsize()}")
        print(f"{'='*60}")
    
    def run(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        print("\n" + "="*60)
        print("üéØ COMPLETE PARCEL SORTING SYSTEM")
        print("   Camera ‚Üí OCR ‚Üí Dobot ‚Üí Database")
        print("="*60)
        print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("="*60)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        if not self.validate_configuration():
            print("\n‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ")
            return
        
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö
        self.initialize_components()
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° threads
        self.is_running = True
        
        if self.auto_process:
            # OCR Worker
            self.ocr_thread = threading.Thread(
                target=self.ocr_worker,
                daemon=True
            )
            self.ocr_thread.start()
            
            # Dobot Worker (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ)
            if self.enable_dobot:
                self.dobot_thread = threading.Thread(
                    target=self.dobot_worker,
                    daemon=True
                )
                self.dobot_thread.start()
            
            # Image Monitor
            self.monitor_thread = threading.Thread(
                target=self.monitor_new_images,
                daemon=True
            )
            self.monitor_thread.start()
            
            print("\n‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á (blocking)
        print("\nüì∑ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á...")
        try:
            self.camera.run()
        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è  ‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
        finally:
            self.shutdown()
    
    def shutdown(self):
        """‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö"""
        print("\nüõë ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö...")
        
        self.is_running = False
        
        # ‡∏£‡∏≠ queue ‡∏ß‡πà‡∏≤‡∏á
        if not self.ocr_queue.empty():
            print(f"‚è≥ ‡∏£‡∏≠ OCR ({self.ocr_queue.qsize()} ‡∏†‡∏≤‡∏û)...")
            self.ocr_queue.join()
        
        if self.enable_dobot and not self.dobot_queue.empty():
            print(f"‚è≥ ‡∏£‡∏≠ Dobot ({self.dobot_queue.qsize()} ‡∏ä‡∏¥‡πâ‡∏ô)...")
            self.dobot_queue.join()
        
        # ‡∏£‡∏≠ threads
        for thread in [self.ocr_thread, self.dobot_thread, self.monitor_thread]:
            if thread and thread.is_alive():
                thread.join(timeout=5)
        
        # ‡∏õ‡∏¥‡∏î Dobot
        if self.dobot_controller:
            self.dobot_controller.disconnect()
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
        print("\n" + "="*60)
        print("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        print("="*60)
        self.print_stats()
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ OCR
        if self.ocr_processor:
            print("\n" + self.ocr_processor.generate_sorting_report([]))
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ Dobot
        if self.dobot_controller:
            self.dobot_controller.print_stats()
        
        print("\n‚úÖ ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        print(f"üìÅ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:")
        print(f"   - ‡∏†‡∏≤‡∏û: {self.image_folder}/")
        print(f"   - ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: {self.output_folder}/")


def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    
    config = {
        # API Settings
        'typhoon_api_key': None,  # ‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å .env
        'db_api_url': None,       # ‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å .env
        'db_api_key': None,       # ‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å .env
        
        # Folder Settings
        'image_folder': 'parcel_images',
        'output_folder': 'parcel_results',
        
        # Camera Settings
        'camera_index': 1,
        'auto_capture': False,
        
        # OCR Settings
        'enhance_images': True,
        'save_to_db': True,  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô True ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å DB
        
        # Dobot Settings
        'enable_dobot': True,           # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô False ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ Dobot
        'dobot_port': 'COM3',           # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç COM Port ‡∏Ç‡∏≠‡∏á Dobot
        'dobot_speed': 100,             # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß 0-100
        'dobot_simulation': False,      # True = ‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Dobot ‡∏à‡∏£‡∏¥‡∏á
        
        # Processing Settings
        'auto_process': True,
        'process_interval': 2,
    }
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ô pipeline
    pipeline = CompleteSortingPipeline(config)
    pipeline.run()


if __name__ == "__main__":
    main()