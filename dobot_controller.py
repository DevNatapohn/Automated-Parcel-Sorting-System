#!/usr/bin/env python3
"""
Dobot Controller - ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÅ‡∏Ç‡∏ô‡∏Å‡∏• Dobot ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏±‡∏î‡πÅ‡∏¢‡∏Å‡∏û‡∏±‡∏™‡∏î‡∏∏
**‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:** ‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ wait=True ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ Dobot ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‡∏•‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô (Drift)
"""

from pydobot import Dobot
import time
from typing import Optional, Dict, Tuple

class DobotController:
    """Class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÅ‡∏Ç‡∏ô‡∏Å‡∏• Dobot"""

    # --- ‡∏à‡∏∏‡∏î‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ï‡πà‡∏≤‡∏á‡πÜ ---
    HOME = [125.92, 177.82, 42.11, 54.70]
    PICKUP = [-8.51, 215.85, -8.19,92.26]  # ‡∏à‡∏∏‡∏î‡∏´‡∏¢‡∏¥‡∏ö‡∏û‡∏±‡∏™‡∏î‡∏∏ (‡∏´‡∏•‡∏±‡∏á‡∏™‡πÅ‡∏Å‡∏ô OCR)
    
    # ‡∏à‡∏∏‡∏î‡∏ß‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î (‡∏Ñ‡∏∏‡∏ì‡∏£‡∏∞‡∏ö‡∏∏‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
    DROP_POINTS = {
        "‡∏ô‡∏Ñ‡∏£‡∏ô‡∏≤‡∏¢‡∏Å": [231.49, 0.25, -18.38, 0.06],
        "‡∏ô‡∏Ñ‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå": [232.60, 140.08, -19.86, 31.06],
        "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà": [231.49, 0.25, -18.38, 0.06],
        "‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ": [232.60, 140.08, -19.86, 31.06],
    }

    # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    SAFETY_Z = 50.0
    
    # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
    FAST_SPEED = 100
    SLOW_SPEED = 50
    
    # ‡∏î‡∏µ‡πÄ‡∏•‡∏¢‡πå‡∏´‡∏±‡∏ß‡∏î‡∏π‡∏î
    SUCTION_DELAY = 0.05
    
    def __init__(self, port: str = "COM5", speed: int = 100, simulation_mode: bool = False):
        """
        Args:
            port: COM port ‡∏Ç‡∏≠‡∏á Dobot
            speed: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà (0-100)
            simulation_mode: ‡∏ñ‡πâ‡∏≤ True ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Dobot ‡∏à‡∏£‡∏¥‡∏á (‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
        """
        self.port = port
        self.speed = speed
        self.simulation_mode = simulation_mode
        self.dobot: Optional[Dobot] = None
        self.is_connected = False
        
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        self.stats = {
            'total_picks': 0,
            'successful_drops': 0,
            'failed_drops': 0,
            'by_province': {}
        }
    
    def connect(self) -> bool:
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Dobot"""
        if self.simulation_mode:
            print("ü§ñ [SIMULATION MODE] ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Dobot ‡∏à‡∏£‡∏¥‡∏á")
            self.is_connected = True
            return True
        
        try:
            print(f"üîå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Dobot ‡∏ó‡∏µ‡πà {self.port}...")
            # ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Dobot ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î Time out
            self.dobot = Dobot(port=self.port, verbose=False) 
            
            print(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Dobot ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á
            self.dobot.speed(self.speed, self.speed)
            print(f"‚ö° ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß: {self.speed}%")
            
            self.is_connected = True
            
            # ‡∏Å‡∏•‡∏±‡∏ö Home ‡πÄ‡∏™‡∏°‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Drift)
            self.move_home("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞ Homing")
            
            return True
            
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Dobot: {e}")
            print("üí° ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Simulation Mode ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î")
            self.simulation_mode = True
            self.is_connected = True
            # ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á
            return False
    
    def disconnect(self):
        """‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"""
        if self.dobot and not self.simulation_mode:
            try:
                print("üëã ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Dobot...")
                # ‡∏Å‡∏•‡∏±‡∏ö Home ‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î
                self.move_home("‡∏Å‡∏•‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î")
                self.dobot.close()
                print("‚úÖ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
            except Exception as e:
                print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {e}")
        
        self.is_connected = False
    
    def move_to(self, x: float, y: float, z: float, r: float, 
                message: str = "", wait: bool = True):
        """
        ‡πÄ‡∏Ñ‡∏•‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î **‡πÄ‡∏ô‡πâ‡∏ô wait=True ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥**
        """
        if message:
            print(f" ¬†‚û°Ô∏è ¬†{message} ‚Üí ({x:.1f}, {y:.1f}, {z:.1f})")
        
        if self.simulation_mode:
            time.sleep(0.3)  # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
            return
        
        if self.dobot:
            try:
                # ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ wait=True ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
                self.dobot.move_to(x, y, z, r, wait=wait)
            except Exception as e:
                print(f" ¬†‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà: {e}")
        else:
             print(" ¬†‚ùå Dobot object is not initialized (Simulation mode or connection failed)")
    
    def suction_on(self):
        """‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏±‡∏ß‡∏î‡∏π‡∏î"""
        print(" ¬†üîµ ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏±‡∏ß‡∏î‡∏π‡∏î")
        
        if self.simulation_mode:
            time.sleep(self.SUCTION_DELAY)
            return
        
        if self.dobot:
            try:
                self.dobot.suck(True)
                time.sleep(self.SUCTION_DELAY)
            except Exception as e:
                print(f" ¬†‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏±‡∏ß‡∏î‡∏π‡∏î: {e}")
    
    def suction_off(self):
        """‡∏õ‡∏¥‡∏î‡∏´‡∏±‡∏ß‡∏î‡∏π‡∏î"""
        print(" ¬†üî¥ ‡∏õ‡∏¥‡∏î‡∏´‡∏±‡∏ß‡∏î‡∏π‡∏î")
        
        if self.simulation_mode:
            time.sleep(self.SUCTION_DELAY)
            return
        
        if self.dobot:
            try:
                self.dobot.suck(False)
                time.sleep(self.SUCTION_DELAY)
            except Exception as e:
                print(f" ¬†‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏´‡∏±‡∏ß‡∏î‡∏π‡∏î: {e}")
    
    def move_home(self, message: str = ""):
        """‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Home"""
        msg = f"Home Position{' - ' + message if message else ''}"
        # ‡πÉ‡∏ä‡πâ move_to ‡∏ã‡∏∂‡πà‡∏á‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ wait=True ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
        self.move_to(*self.HOME, message=msg)
    
    def move_to_pickup(self):
        """‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏¢‡∏¥‡∏ö‡∏û‡∏±‡∏™‡∏î‡∏∏ (Pick Sequence)"""
        # 1. ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏à‡∏∏‡∏î‡∏´‡∏¢‡∏¥‡∏ö (SAFETY_Z)
        self.move_to(
            self.PICKUP[0], 
            self.PICKUP[1], 
            self.SAFETY_Z, 
            self.PICKUP[3],
            "‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏à‡∏∏‡∏î‡∏´‡∏¢‡∏¥‡∏ö‡∏û‡∏±‡∏™‡∏î‡∏∏ (Safety Z)"
        )
        
        # 2. ‡∏•‡∏á‡πÑ‡∏õ‡∏´‡∏¢‡∏¥‡∏ö
        self.move_to(*self.PICKUP, message="‡∏•‡∏á‡∏´‡∏¢‡∏¥‡∏ö‡∏û‡∏±‡∏™‡∏î‡∏∏")
    
    def move_to_drop(self, province: str) -> bool:
        """
        ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡∏≤‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏ï‡∏≤‡∏°‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î (Drop Sequence)
        """
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏ß‡∏≤‡∏á
        drop_point = self.DROP_POINTS.get(province)
        
        if not drop_point:
            print(f" ¬†‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏à‡∏∏‡∏î‡∏ß‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö '{province}'")
            return False
        
        # 1. ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏à‡∏∏‡∏î‡∏ß‡∏≤‡∏á (SAFETY_Z)
        self.move_to(
            drop_point[0],
            drop_point[1],
            self.SAFETY_Z,
            drop_point[3],
            f"‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏à‡∏∏‡∏î‡∏ß‡∏≤‡∏á '{province}' (Safety Z)"
        )
        
        # 2. ‡∏•‡∏á‡πÑ‡∏õ‡∏ß‡∏≤‡∏á
        self.move_to(*drop_point, message=f"‡∏•‡∏á‡∏ß‡∏≤‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏ó‡∏µ‡πà '{province}'")
        
        return True
    
    def pick_and_place(self, province: str) -> bool:
        """
        ‡∏´‡∏¢‡∏¥‡∏ö‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î (‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å)
        """
        if not self.is_connected:
            print("‚ùå Dobot ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠")
            return False
        
        print(f"\n{'='*60}")
        print(f"ü§ñ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡πÅ‡∏¢‡∏Å ‚Üí '{province}'")
        print(f"{'='*60}")
        
        try:
            # 1. ‡πÑ‡∏õ‡∏´‡∏¢‡∏¥‡∏ö
            print("üì¶ [1/5] ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏¢‡∏¥‡∏ö...")
            self.move_to_pickup()
            
            print("üì¶ [2/5] ‡∏´‡∏¢‡∏¥‡∏ö‡∏û‡∏±‡∏™‡∏î‡∏∏...")
            self.suction_on()
            
            # ‡∏¢‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏´‡∏¢‡∏¥‡∏ö (‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà SAFETY_Z ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏ß‡∏≤‡∏á)
            self.move_to(
                self.PICKUP[0],
                self.PICKUP[1],
                self.SAFETY_Z,
                self.PICKUP[3],
                "‡∏¢‡∏Å‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏Ç‡∏∂‡πâ‡∏ô (Safety)"
            )
            
            # 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÑ‡∏õ‡∏ß‡∏≤‡∏á
            target_province = province if province in self.DROP_POINTS else "‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏£‡∏≠‡∏á"
            
            print(f"üì¶ [3/5] ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤/‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡∏∏‡∏î‡∏ß‡∏≤‡∏á '{target_province}'...")
            
            # 3. ‡πÑ‡∏õ‡∏ß‡∏≤‡∏á
            print(f"üì¶ [4/5] ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏à‡∏∏‡∏î‡∏ß‡∏≤‡∏á '{target_province}'...")
            success = self.move_to_drop(target_province)
            
            if not success:
                # ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡∏´‡∏≤‡∏Å‡πÉ‡∏ä‡πâ "‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏£‡∏≠‡∏á" ‡πÅ‡∏ï‡πà‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÑ‡∏ß‡πâ
                self.stats['failed_drops'] += 1
                return False
            
            print("üì¶ [5/5] ‡∏ß‡∏≤‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏...")
            self.suction_off()
            
            # ‡∏¢‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ß‡∏≤‡∏á (‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà SAFETY_Z ‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö Home)
            drop_point = self.DROP_POINTS[target_province]
            self.move_to(
                drop_point[0],
                drop_point[1],
                self.SAFETY_Z,
                drop_point[3],
                "‡∏¢‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ß‡∏≤‡∏á (Safety)"
            )
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
            self.stats['total_picks'] += 1
            self.stats['successful_drops'] += 1
            self.stats['by_province'][target_province] = self.stats['by_province'].get(target_province, 0) + 1
            
            print(f"‚úÖ ‡∏Ñ‡∏±‡∏î‡πÅ‡∏¢‡∏Å‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÑ‡∏õ‡∏¢‡∏±‡∏á '{target_province}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            
            return True
            
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡πÅ‡∏¢‡∏Å: {e}")
            
            # Emergency: ‡∏õ‡∏¥‡∏î‡∏´‡∏±‡∏ß‡∏î‡∏π‡∏î‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏±‡∏ö Home (‡∏ñ‡πâ‡∏≤‡∏ó‡∏≥‡πÑ‡∏î‡πâ)
            try:
                self.suction_off()
                self.move_home("‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô")
            except:
                pass
            
            self.stats['failed_drops'] += 1
            return False
    
    def add_drop_point(self, province: str, coordinates: list):
        """
        ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î‡∏ß‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
        """
        if len(coordinates) == 4 and all(isinstance(c, (int, float)) for c in coordinates):
            self.DROP_POINTS[province] = coordinates
            print(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î‡∏ß‡∏≤‡∏á '{province}' ‚Üí {coordinates}")
        else:
            print("‚ùå ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô list ‡∏ó‡∏µ‡πà‡∏°‡∏µ 4 ‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö: [x, y, z, r]")
    
    def get_stats(self) -> Dict:
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
        return self.stats.copy()
    
    def print_stats(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
        print("\n" + "="*60)
        print("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Dobot")
        print("="*60)
        print(f"üî¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏¥‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {self.stats['total_picks']}")
        print(f"‚úÖ ‡∏ß‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {self.stats['successful_drops']}")
        print(f"‚ùå ‡∏ß‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {self.stats['failed_drops']}")
        
        if self.stats['by_province']:
            print("\nüìç ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏°‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î:")
            for province, count in sorted(self.stats['by_province'].items()):
                print(f" ¬† - {province}: {count} ‡∏ä‡∏¥‡πâ‡∏ô")
        
        print("="*60)


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö
def test_dobot():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Dobot"""
    
    print("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Dobot Controller")
    print("="*60)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á controller (Simulation Mode)
    controller = DobotController(
        port="COM5",
        speed=100,
        simulation_mode=True  # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πà‡∏≠ Dobot ‡∏à‡∏£‡∏¥‡∏á
    )
    
    # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    controller.connect()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏±‡∏î‡πÅ‡∏¢‡∏Å‡∏û‡∏±‡∏™‡∏î‡∏∏
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô DROP_POINTS ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö "‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏£‡∏≠‡∏á"
    test_provinces = ["‡∏ô‡∏Ñ‡∏£‡∏ô‡∏≤‡∏¢‡∏Å", "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà", "‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ", "‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ", "‡∏ô‡∏Ñ‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå"]
    
    for province in test_provinces:
        print(f"\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á '{province}'")
        success = controller.pick_and_place(province)
        
        if success:
            print(f" ¬† ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        else:
            print(f" ¬† ‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
        
        time.sleep(0.5)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    controller.print_stats()
    
    # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    controller.disconnect()


if __name__ == "__main__":
    test_dobot()