#process.py
import cv2
from openai import OpenAI
import json
import re
from datetime import datetime
from PIL import Image
import base64
import os
from typing import Dict, Optional, List
import numpy as np
import requests


class DatabaseAPI:
    """Class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö PHP API ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á MySQL"""
    
    def __init__(self, api_url: str, api_key: str):
        self.api_url = api_url
        self.api_key = api_key
        self.session = requests.Session()
        self.session.headers.update({
            'Authorization': f'Bearer {api_key}',  # ‡πÉ‡∏ä‡πâ Authorization ‡πÅ‡∏ó‡∏ô
            'Content-Type': 'application/json'
        })
    
    def save_parcel_to_db(self, parcel_data: Dict) -> Dict:
        """
        ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏•‡∏á database
        
        Args:
            parcel_data: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å OCR
            
        Returns:
            response ‡∏à‡∏≤‡∏Å API
        """
        try:
            # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö structure ‡∏ó‡∏µ‡πà PHP API ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            payload = self._prepare_payload(parcel_data)
            
            print(f"üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á: {self.api_url}")
            print(f"üì¶ Payload Preview:")
            print(f"   - Sender: {payload['sender']['name']} ({payload['sender']['province']})")
            print(f"   - Recipient: {payload['recipient']['name']} ({payload['recipient']['province']})")
            print(f"   - Tracking: {payload['parcel']['tracking_number']}")
            
            response = self.session.post(
                self.api_url,
                json=payload,
                timeout=30
            )
            
            response.raise_for_status()
            result = response.json()
            
            if result.get('success'):
                print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - Parcel ID: {result.get('parcel_id')}")
            else:
                print(f"‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {result.get('message')}")
            
            return result
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API: {e}")
            return {
                "success": False,
                "message": str(e)
            }
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            return {
                "success": False,
                "message": str(e)
            }
    
    def _prepare_payload(self, parcel_data: Dict) -> Dict:
        """
        ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å OCR ‡πÄ‡∏õ‡πá‡∏ô format ‡∏ó‡∏µ‡πà database ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        """
        sender = parcel_data.get('sender', {})
        recipient = parcel_data.get('recipient', {})
        
        payload = {
            "action": "create_parcel",  # ‡∏£‡∏∞‡∏ö‡∏∏ action ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PHP
            "sender": {
                "name": sender.get('name', ''),
                "phone": sender.get('phone', ''),
                "address_details": sender.get('address', ''),
                "province": sender.get('province', '')
            },
            "recipient": {
                "name": recipient.get('name', ''),
                "phone": recipient.get('phone', ''),
                "address_details": recipient.get('address', ''),
                "province": recipient.get('province', '')
            },
            "parcel": {
                "status": "Pending",
                "tracking_number": parcel_data.get('tracking_number', '')
            }
        }
        
        return payload
    
    def get_parcel_by_tracking(self, tracking_number: str) -> Optional[Dict]:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏à‡∏≤‡∏Å tracking number"""
        try:
            payload = {
                "action": "get_parcel",
                "tracking_number": tracking_number
            }
            
            response = self.session.post(
                self.api_url,
                json=payload,
                timeout=30
            )
            
            response.raise_for_status()
            return response.json()
            
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
            return None
    
    def update_parcel_status(self, parcel_id: int, status: str) -> Dict:
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏±‡∏™‡∏î‡∏∏"""
        try:
            payload = {
                "action": "update_status",
                "parcel_id": parcel_id,
                "status": status
            }
            
            response = self.session.post(
                self.api_url,
                json=payload,
                timeout=30
            )
            
            response.raise_for_status()
            return response.json()
            
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {e}")
            return {
                "success": False,
                "message": str(e)
            }


class TyphoonOCR:
    """Class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Typhoon OCR API"""
    
    def __init__(self, api_key: str):
        self.client = OpenAI(
            api_key=api_key,
            base_url="https://api.opentyphoon.ai/v1"
        )
        
    def extract_text_from_image(self, image_path: str) -> str:
        """‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ Typhoon Vision"""
        try:
            with open(image_path, "rb") as image_file:
                image_data = base64.b64encode(image_file.read()).decode('utf-8')
            
            response = self.client.chat.completions.create(
                model="typhoon-ocr-preview",
                messages=[
                    {
                        "role": "system",
                        "content": "You are an OCR expert. Extract data from parcel labels and return ONLY valid JSON format. No other text."
                    },
                    {
                        "role": "user",
                        "content": [
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/jpeg;base64,{image_data}"
                                }
                            },
                            {
                                "type": "text",
                                "text": """Read this parcel label and extract:
- Sender (name, phone, address, province)
- Recipient (name, phone, address, province)
- Tracking number (if any)

Return ONLY this JSON structure (no markdown, no explanation):
{
    "sender": {
        "name": "sender name",
        "phone": "phone number",
        "address": "full address",
        "province": "province name"
    },
    "recipient": {
        "name": "recipient name",
        "phone": "phone number",
        "address": "full address",
        "province": "province name"
    },
    "tracking_number": "tracking number or empty string"
}"""
                            }
                        ]
                    }
                ],
                max_tokens=1000,
                temperature=0.0
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            print(f"‚ùå Error calling Typhoon API: {e}")
            return ""


class ImagePreprocessor:
    """Class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥ OCR"""
    
    def __init__(self, output_folder: str = "enhanced_images"):
        self.output_folder = output_folder
        if not os.path.exists(output_folder):
            os.makedirs(output_folder)
    
    def enhance_image(self, image_path: str) -> str:
        """‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏†‡∏≤‡∏û"""
        try:
            img = cv2.imread(image_path)
            if img is None:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏†‡∏≤‡∏û: {image_path}")
                return image_path
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô grayscale
    
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏°‡∏ä‡∏±‡∏î
            clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))
            enhanced = clahe.apply(img)
            
            # ‡∏•‡∏î noise
            denoised = cv2.fastNlMeansDenoising(enhanced)
            
            # ‡∏õ‡∏£‡∏±‡∏ö threshold
            _, binary = cv2.threshold(denoised, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß
            filename = os.path.basename(image_path)
            output_path = os.path.join(self.output_folder, f"enhanced_{filename}")
            cv2.imwrite(output_path, binary)
            
            return output_path
            
        except Exception as e:
            print(f"‚ùå Error enhancing image: {e}")
            return image_path


class CompleteParcelSortingSystem:
    """‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏±‡∏î‡πÅ‡∏¢‡∏Å‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Database)"""
    
    def __init__(self, typhoon_api_key: str, output_folder: str = "parcel_results",
                 db_api_url: str = None, db_api_key: str = None):
        self.ocr = TyphoonOCR(typhoon_api_key)
        self.preprocessor = ImagePreprocessor()
        self.output_folder = output_folder
        self.sorted_folder = os.path.join(output_folder, "sorted_by_province")
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Database API (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        self.db_api = None
        if db_api_url and db_api_key:
            self.db_api = DatabaseAPI(db_api_url, db_api_key)
            print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Database API ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        else:
            print("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Database API (‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ JSON)")
        
        if not os.path.exists(output_folder):
            os.makedirs(output_folder)
        
        if not os.path.exists(self.sorted_folder):
            os.makedirs(self.sorted_folder)
        
        # ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        self.all_provinces = [
            "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£", "‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà", "‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ", "‡∏Å‡∏≤‡∏¨‡∏™‡∏¥‡∏ô‡∏ò‡∏∏‡πå", "‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏û‡∏ä‡∏£",
            "‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô", "‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ", "‡∏â‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏£‡∏≤", "‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ", "‡∏ä‡∏±‡∏¢‡∏ô‡∏≤‡∏ó", "‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥",
            "‡∏ä‡∏∏‡∏°‡∏û‡∏£", "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢", "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà", "‡∏ï‡∏£‡∏±‡∏á", "‡∏ï‡∏£‡∏≤‡∏î", "‡∏ï‡∏≤‡∏Å",
            "‡∏ô‡∏Ñ‡∏£‡∏ô‡∏≤‡∏¢‡∏Å", "‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°", "‡∏ô‡∏Ñ‡∏£‡∏û‡∏ô‡∏°", "‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤", "‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä",
            "‡∏ô‡∏Ñ‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå", "‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ", "‡∏ô‡∏£‡∏≤‡∏ò‡∏¥‡∏ß‡∏≤‡∏™", "‡∏ô‡πà‡∏≤‡∏ô", "‡∏ö‡∏∂‡∏á‡∏Å‡∏≤‡∏¨", "‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå",
            "‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ", "‡∏õ‡∏£‡∏∞‡∏à‡∏ß‡∏ö‡∏Ñ‡∏µ‡∏£‡∏µ‡∏Ç‡∏±‡∏ô‡∏ò‡πå", "‡∏õ‡∏£‡∏≤‡∏à‡∏µ‡∏ô‡∏ö‡∏∏‡∏£‡∏µ", "‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ", "‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤",
            "‡∏û‡∏∞‡πÄ‡∏¢‡∏≤", "‡∏û‡∏±‡∏á‡∏á‡∏≤", "‡∏û‡∏±‡∏ó‡∏•‡∏∏‡∏á", "‡∏û‡∏¥‡∏à‡∏¥‡∏ï‡∏£", "‡∏û‡∏¥‡∏©‡∏ì‡∏∏‡πÇ‡∏•‡∏Å", "‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏∏‡∏£‡∏µ", "‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏π‡∏£‡∏ì‡πå",
            "‡πÅ‡∏û‡∏£‡πà", "‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï", "‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°", "‡∏°‡∏∏‡∏Å‡∏î‡∏≤‡∏´‡∏≤‡∏£", "‡πÅ‡∏°‡πà‡∏Æ‡πà‡∏≠‡∏á‡∏™‡∏≠‡∏ô",
            "‡∏¢‡πÇ‡∏™‡∏ò‡∏£", "‡∏¢‡∏∞‡∏•‡∏≤", "‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡∏≠‡πá‡∏î", "‡∏£‡∏∞‡∏ô‡∏≠‡∏á", "‡∏£‡∏∞‡∏¢‡∏≠‡∏á", "‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ",
            "‡∏•‡∏û‡∏ö‡∏∏‡∏£‡∏µ", "‡∏•‡∏≥‡∏õ‡∏≤‡∏á", "‡∏•‡∏≥‡∏û‡∏π‡∏ô", "‡πÄ‡∏•‡∏¢", "‡∏®‡∏£‡∏µ‡∏™‡∏∞‡πÄ‡∏Å‡∏©", "‡∏™‡∏Å‡∏•‡∏ô‡∏Ñ‡∏£",
            "‡∏™‡∏á‡∏Ç‡∏•‡∏≤", "‡∏™‡∏ï‡∏π‡∏•", "‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£", "‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°", "‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£",
            "‡∏™‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß", "‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ", "‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏∏‡∏£‡∏µ", "‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢", "‡∏™‡∏∏‡∏û‡∏£‡∏£‡∏ì‡∏ö‡∏∏‡∏£‡∏µ",
            "‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ", "‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå", "‡∏´‡∏ô‡∏≠‡∏á‡∏Ñ‡∏≤‡∏¢", "‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏±‡∏ß‡∏•‡∏≥‡∏†‡∏π",
            "‡∏≠‡πà‡∏≤‡∏á‡∏ó‡∏≠‡∏á", "‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÄ‡∏à‡∏£‡∏¥‡∏ç", "‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ", "‡∏≠‡∏∏‡∏ï‡∏£‡∏î‡∏¥‡∏ï‡∏ñ‡πå", "‡∏≠‡∏∏‡∏ó‡∏±‡∏¢‡∏ò‡∏≤‡∏ô‡∏µ", "‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ"
        ]
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏Ñ
        self.region_mapping = {
            "‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠": ["‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà", "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢", "‡∏•‡∏≥‡∏õ‡∏≤‡∏á", "‡∏•‡∏≥‡∏û‡∏π‡∏ô", "‡πÅ‡∏°‡πà‡∏Æ‡πà‡∏≠‡∏á‡∏™‡∏≠‡∏ô", 
                         "‡∏ô‡πà‡∏≤‡∏ô", "‡∏û‡∏∞‡πÄ‡∏¢‡∏≤", "‡πÅ‡∏û‡∏£‡πà", "‡∏≠‡∏∏‡∏ï‡∏£‡∏î‡∏¥‡∏ï‡∏ñ‡πå", "‡∏ï‡∏≤‡∏Å", "‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢", 
                         "‡∏û‡∏¥‡∏©‡∏ì‡∏∏‡πÇ‡∏•‡∏Å", "‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏π‡∏£‡∏ì‡πå", "‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏û‡∏ä‡∏£", "‡∏ô‡∏Ñ‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå", "‡∏û‡∏¥‡∏à‡∏¥‡∏ï‡∏£", "‡∏≠‡∏∏‡∏ó‡∏±‡∏¢‡∏ò‡∏≤‡∏ô‡∏µ"],
            
            "‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏â‡∏µ‡∏¢‡∏á‡πÄ‡∏´‡∏ô‡∏∑‡∏≠": ["‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤", "‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô", "‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ", "‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ",
                                      "‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå", "‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå", "‡∏®‡∏£‡∏µ‡∏™‡∏∞‡πÄ‡∏Å‡∏©", "‡∏¢‡πÇ‡∏™‡∏ò‡∏£", "‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥",
                                      "‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°", "‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡∏≠‡πá‡∏î", "‡∏Å‡∏≤‡∏¨‡∏™‡∏¥‡∏ô‡∏ò‡∏∏‡πå", "‡∏™‡∏Å‡∏•‡∏ô‡∏Ñ‡∏£", "‡∏ô‡∏Ñ‡∏£‡∏û‡∏ô‡∏°",
                                      "‡∏°‡∏∏‡∏Å‡∏î‡∏≤‡∏´‡∏≤‡∏£", "‡πÄ‡∏•‡∏¢", "‡∏´‡∏ô‡∏≠‡∏á‡∏Ñ‡∏≤‡∏¢", "‡∏ö‡∏∂‡∏á‡∏Å‡∏≤‡∏¨", "‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏±‡∏ß‡∏•‡∏≥‡∏†‡∏π", "‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÄ‡∏à‡∏£‡∏¥‡∏ç"],
            
            "‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á": ["‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£", "‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ", "‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ", "‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£",
                        "‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°", "‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£", "‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°", "‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤",
                        "‡∏≠‡πà‡∏≤‡∏á‡∏ó‡∏≠‡∏á", "‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏∏‡∏£‡∏µ", "‡∏ä‡∏±‡∏¢‡∏ô‡∏≤‡∏ó", "‡∏•‡∏û‡∏ö‡∏∏‡∏£‡∏µ", "‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ"],
            
            "‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å": ["‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ", "‡∏£‡∏∞‡∏¢‡∏≠‡∏á", "‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ", "‡∏ï‡∏£‡∏≤‡∏î", "‡∏â‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏£‡∏≤",
                           "‡∏õ‡∏£‡∏≤‡∏à‡∏µ‡∏ô‡∏ö‡∏∏‡∏£‡∏µ", "‡∏ô‡∏Ñ‡∏£‡∏ô‡∏≤‡∏¢‡∏Å", "‡∏™‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß"],
            
            "‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å": ["‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ", "‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ", "‡∏™‡∏∏‡∏û‡∏£‡∏£‡∏ì‡∏ö‡∏∏‡∏£‡∏µ", "‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏∏‡∏£‡∏µ", 
                          "‡∏õ‡∏£‡∏∞‡∏à‡∏ß‡∏ö‡∏Ñ‡∏µ‡∏£‡∏µ‡∏Ç‡∏±‡∏ô‡∏ò‡πå"],
            
            "‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ": ["‡∏™‡∏á‡∏Ç‡∏•‡∏≤", "‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï", "‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ", "‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä", "‡∏ï‡∏£‡∏±‡∏á",
                      "‡∏û‡∏±‡∏ó‡∏•‡∏∏‡∏á", "‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ", "‡∏¢‡∏∞‡∏•‡∏≤", "‡∏ô‡∏£‡∏≤‡∏ò‡∏¥‡∏ß‡∏≤‡∏™", "‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà", "‡∏û‡∏±‡∏á‡∏á‡∏≤",
                      "‡∏£‡∏∞‡∏ô‡∏≠‡∏á", "‡∏ä‡∏∏‡∏°‡∏û‡∏£", "‡∏™‡∏ï‡∏π‡∏•"]
        }
        
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
        self.stats = {
            "total_processed": 0,
            "successful": 0,
            "failed": 0,
            "db_saved": 0,
            "db_failed": 0,
            "by_region": {},
            "by_province": {}
        }
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        self.parcels = []
    
    def get_region(self, province: str) -> str:
        """‡∏´‡∏≤‡∏†‡∏≤‡∏Ñ‡∏à‡∏≤‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"""
        for region, provinces in self.region_mapping.items():
            if province in provinces:
                return region
        return "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏†‡∏≤‡∏Ñ"
    
    def extract_province_from_text(self, text: str) -> Optional[str]:
        """
        ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: "‡∏à.‡∏£‡∏∞‡∏¢‡∏≠‡∏á", "‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏£‡∏∞‡∏¢‡∏≠‡∏á", "‡∏£‡∏∞‡∏¢‡∏≠‡∏á"
        """
        if not text:
            return None
        
        # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        text = text.strip()
        
        # Pattern 1: ‡∏à.‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î ‡∏´‡∏£‡∏∑‡∏≠ ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
        province_patterns = [
            r'‡∏à\.([^\s\d]+)',
            r'‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î([^\s\d]+)',
        ]
        
        for pattern in province_patterns:
            match = re.search(pattern, text)
            if match:
                province_candidate = match.group(1).strip()
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                for province in self.all_provinces:
                    if province_candidate == province or province_candidate in province:
                        return province
        
        # Pattern 2: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        for province in self.all_provinces:
            # ‡∏ï‡∏£‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            if province in text:
                return province
            
            # ‡∏ï‡∏£‡∏á‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
            province_no_space = province.replace(" ", "")
            text_no_space = text.replace(" ", "")
            if province_no_space in text_no_space:
                return province
        
        # Pattern 3: ‡∏•‡∏≠‡∏á‡πÅ‡∏ö‡∏ö fuzzy matching
        text_words = set(re.findall(r'[\u0E00-\u0E7F]+', text))
        for province in self.all_provinces:
            province_words = set(re.findall(r'[\u0E00-\u0E7F]+', province))
            if province_words.intersection(text_words):
                return province
        
        return None
    
    def smart_split_sender_recipient(self, text: str) -> tuple:
        """
        üéØ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢ NLP patterns
        
        Returns:
            (sender_text, recipient_text)
        """
        print("\nüß† ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ NLP ‡πÅ‡∏¢‡∏Å‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á-‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö...")
        
        # Method 1: ‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á" ‡πÅ‡∏•‡∏∞ "‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö" (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)
        sender_markers = [
            r'‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á\s*[:Ôºö]?',
            r'sender\s*[:Ôºö]?',
            r'from\s*[:Ôºö]?'
        ]
        
        recipient_markers = [
            r'‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö\s*[:Ôºö]?',
            r'recipient\s*[:Ôºö]?',
            r'to\s*[:Ôºö]?'
        ]
        
        # ‡∏´‡∏≤ position ‡∏Ç‡∏≠‡∏á marker ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
        sender_positions = []
        recipient_positions = []
        
        for pattern in sender_markers:
            for match in re.finditer(pattern, text, re.IGNORECASE):
                sender_positions.append(match.start())
        
        for pattern in recipient_markers:
            for match in re.finditer(pattern, text, re.IGNORECASE):
                recipient_positions.append(match.start())
        
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á marker
        if sender_positions and recipient_positions:
            # ‡πÄ‡∏≠‡∏≤ marker ‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ù‡∏±‡πà‡∏á
            sender_start = min(sender_positions)
            recipient_start = min(recipient_positions)
            
            print(f"   ‚úÖ ‡πÄ‡∏à‡∏≠ marker: ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á @{sender_start}, ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö @{recipient_start}")
            
            if sender_start < recipient_start:
                sender_text = text[sender_start:recipient_start].strip()
                recipient_text = text[recipient_start:].strip()
            else:
                recipient_text = text[recipient_start:sender_start].strip()
                sender_text = text[sender_start:].strip()
            
            return sender_text, recipient_text
        
        # Method 2: ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ marker ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡∏•‡∏≠‡∏á‡πÅ‡∏ö‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        print("   ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ marker ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô - ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏ö‡πà‡∏á‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...")
        
        phone_pattern = r'(?:‡πÇ‡∏ó‡∏£|tel|phone)\s*[:Ôºö]?\s*[0-9\s\-]{9,}'
        phones = list(re.finditer(phone_pattern, text, re.IGNORECASE))
        
        if len(phones) >= 2:
            # ‡πÅ‡∏ö‡πà‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ set ‡πÅ‡∏£‡∏Å‡∏Å‡∏±‡∏ö set ‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á
            split_point = phones[1].start()
            
            # ‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏õ‡∏´‡∏≤ marker ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
            before_split = text[:split_point]
            for pattern in recipient_markers:
                match = re.search(pattern + r'.*$', before_split, re.IGNORECASE)
                if match:
                    split_point = match.start()
                    break
            
            sender_text = text[:split_point].strip()
            recipient_text = text[split_point:].strip()
            
            print(f"   ‚úÖ ‡πÅ‡∏ö‡πà‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ @ position {split_point}")
            return sender_text, recipient_text
        
        # Method 3: ‡πÅ‡∏ö‡πà‡∏á‡∏Ñ‡∏£‡∏∂‡πà‡∏á (fallback)
        print("   ‚ö†Ô∏è ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ fallback: ‡πÅ‡∏ö‡πà‡∏á‡∏Ñ‡∏£‡∏∂‡πà‡∏á")
        lines = text.split('\n')
        mid = len(lines) // 2
        
        sender_text = '\n'.join(lines[:mid])
        recipient_text = '\n'.join(lines[mid:])
        
        return sender_text, recipient_text
    
    def normalize_ocr_json_result(self, data: Dict) -> Dict:
        """
        üéØ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç JSON structure ‡∏ó‡∏µ‡πà OCR ‡∏™‡πà‡∏á‡∏°‡∏≤‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        """
        if not isinstance(data, dict):
            return data
        
        print("\nüîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á JSON...")
        
        # ‡∏Å‡∏£‡∏ì‡∏µ 1: sender ‡πÄ‡∏õ‡πá‡∏ô string ‡∏¢‡∏≤‡∏ß ‡πÜ (‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥)
        sender = data.get('sender', {})
        
        if isinstance(sender, str) and len(sender) > 100:
            print("   ‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö: sender ‡πÄ‡∏õ‡πá‡∏ô string ‡∏¢‡∏≤‡∏ß (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà dict)")
            print(f"   üìè ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß: {len(sender)} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£")
            
            # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á-‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
            sender_text, recipient_text = self.smart_split_sender_recipient(sender)
            
            print(f"\n   üì§ ‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á ({len(sender_text)} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£):")
            print("   " + "-" * 50)
            print("   " + sender_text[:150].replace('\n', '\n   '))
            
            print(f"\n   üì• ‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö ({len(recipient_text)} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£):")
            print("   " + "-" * 50)
            print("   " + recipient_text[:150].replace('\n', '\n   '))
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô dict
            sender_dict = self._extract_person_info(sender_text, is_recipient=False)
            recipient_dict = self._extract_person_info(recipient_text, is_recipient=True)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á structure ‡πÉ‡∏´‡∏°‡πà
            data['sender'] = sender_dict
            data['recipient'] = recipient_dict
            
            print("\n   ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á JSON ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
        # ‡∏Å‡∏£‡∏ì‡∏µ 2: ‡∏°‡∏µ recipient ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡πá‡∏ô string
        elif isinstance(data.get('recipient'), str):
            print("   ‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö: recipient ‡πÄ‡∏õ‡πá‡∏ô string (‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô dict)")
            recipient_text = data.get('recipient', '')
            data['recipient'] = self._extract_person_info(recipient_text, is_recipient=True)
        
        # ‡∏Å‡∏£‡∏ì‡∏µ 3: ‡πÑ‡∏°‡πà‡∏°‡∏µ recipient ‡πÄ‡∏•‡∏¢
        elif 'recipient' not in data or not data['recipient']:
            print("   ‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• recipient")
            
            # ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏à‡∏≤‡∏Å sender (‡∏Å‡∏£‡∏ì‡∏µ OCR ‡πÉ‡∏™‡πà‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô)
            if isinstance(sender, str):
                sender_text, recipient_text = self.smart_split_sender_recipient(sender)
                data['sender'] = self._extract_person_info(sender_text, is_recipient=False)
                data['recipient'] = self._extract_person_info(recipient_text, is_recipient=True)
        
        return data
    
    def normalize_province_data(self, data: Dict) -> Dict:
        """‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"""
        if not data:
            return data
        
        print("\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î...")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á
        sender = data.get('sender', {})
        if isinstance(sender, dict):
            sender_province = sender.get('province', '')
            if sender_province:
                print(f"   üì§ ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á - ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î: '{sender_province}'")
                normalized = self.extract_province_from_text(sender_province)
                if normalized:
                    sender['province'] = normalized
                    print(f"       ‚Üí ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô: '{normalized}' ‚úÖ")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç!)
        recipient = data.get('recipient', {})
        if isinstance(recipient, dict):
            recipient_province = recipient.get('province', '')
            print(f"   üì• ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö - ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÄ‡∏î‡∏¥‡∏°: '{recipient_province}'")
            
            if recipient_province:
                normalized = self.extract_province_from_text(recipient_province)
                if normalized:
                    recipient['province'] = normalized
                    print(f"       ‚Üí ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô: '{normalized}' ‚úÖ")
                else:
                    print(f"       ‚Üí ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ - ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà...")
                    address = recipient.get('address', '')
                    if address:
                        normalized = self.extract_province_from_text(address)
                        if normalized:
                            recipient['province'] = normalized
                            print(f"       ‚Üí ‡∏û‡∏ö‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: '{normalized}' ‚úÖ")
            else:
                print(f"       ‚Üí ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î - ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà...")
                address = recipient.get('address', '')
                if address:
                    normalized = self.extract_province_from_text(address)
                    if normalized:
                        recipient['province'] = normalized
                        print(f"       ‚Üí ‡∏û‡∏ö‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: '{normalized}' ‚úÖ")
                    else:
                        print(f"       ‚Üí ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î ‚ùå")
        
        return data
    
    def determine_delivery_route(self, province: str, region: str) -> str:
        """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏"""
        if province == "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏" or region == "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏†‡∏≤‡∏Ñ":
            return "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏î‡πâ - ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á"
        
        distribution_centers = {
            "‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠": "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ (‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà)",
            "‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏â‡∏µ‡∏¢‡∏á‡πÄ‡∏´‡∏ô‡∏∑‡∏≠": "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏â‡∏µ‡∏¢‡∏á‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ (‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤)",
            "‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á": "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á (‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø)",
            "‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å": "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å (‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ)",
            "‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å": "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å (‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ)",
            "‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ": "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ (‡∏™‡∏á‡∏Ç‡∏•‡∏≤)"
        }
        
        center = distribution_centers.get(region, "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ")
        return f"‚úÖ ‡∏™‡πà‡∏á‡πÑ‡∏õ {center} ‚Üí {province}"
    
    def parse_ocr_result(self, ocr_text: str) -> Optional[Dict]:
        """‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå OCR ‡πÄ‡∏õ‡πá‡∏ô JSON - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö"""
        try:
            # ‡∏•‡∏ö markdown code blocks
            text = ocr_text.strip()
            text = re.sub(r'^```json\s*', '', text)
            text = re.sub(r'^```\s*', '', text)
            text = re.sub(r'\s*```', '', text)
            text = text.strip()
            
            # ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á JSON
            try:
                data = json.loads(text)
                if isinstance(data, dict):
                    return data
            except json.JSONDecodeError:
                pass
            
            # ‡∏•‡∏≠‡∏á‡∏´‡∏≤ JSON object
            json_match = re.search(r'\{[^{}]*(?:\{[^{}]*\}[^{}]*)*\}', text, re.DOTALL)
            if json_match:
                try:
                    data = json.loads(json_match.group())
                    if isinstance(data, dict):
                        return data
                except json.JSONDecodeError:
                    pass
            
            return None
            
        except Exception as e:
            print(f"‚ùå Error parsing JSON: {e}")
            return None
    
    def _extract_person_info(self, text: str, is_recipient: bool = False) -> Dict:
        """‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
        info = {"name": "", "phone": "", "address": "", "province": ""}
        
        try:
            prefix = "   üì•" if is_recipient else "   üì§"
            
            # Extract name
            name_patterns = [
                r'(?:‡∏ä‡∏∑‡πà‡∏≠|name)[:\s]*([^\n\r]+?)(?=\n|‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà|address|‡πÇ‡∏ó‡∏£|tel|$)',
                r'^([^\n\r]+?)(?=\n)',  # first line
            ]
            for pattern in name_patterns:
                match = re.search(pattern, text, re.IGNORECASE | re.MULTILINE)
                if match:
                    name = match.group(1).strip()
                    # Clean up
                    name = re.sub(r'(?:‡∏ä‡∏∑‡πà‡∏≠|name)[:\s]*', '', name, flags=re.IGNORECASE)
                    if name and len(name) > 2:
                        info["name"] = name
                        print(f"{prefix} ‡∏ä‡∏∑‡πà‡∏≠: {name}")
                        break
            
            # Extract phone
            phone_patterns = [
                r'(?:‡πÇ‡∏ó‡∏£|tel|phone)[:\s]*([0-9\s\-]{9,})',
                r'\b(0\d{2}[\s\-]?\d{3}[\s\-]?\d{4})\b',
                r'\b(\d{3}[\s\-]?\d{3}[\s\-]?\d{4})\b'
            ]
            for pattern in phone_patterns:
                match = re.search(pattern, text, re.IGNORECASE)
                if match:
                    phone = match.group(1).strip()
                    phone = re.sub(r'[^\d]', '', phone)  # keep only digits
                    if len(phone) >= 9:
                        info["phone"] = phone
                        print(f"{prefix} ‡πÇ‡∏ó‡∏£: {phone}")
                        break
            
            # Extract address and province
            address_patterns = [
                r'(?:‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà|address)[:\s]*([^\n\r]+?)(?=\n(?:‡πÇ‡∏ó‡∏£|tel)|$)',
                r'(?:‡∏à\.|‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î)[\s]*([^\n\r]+)',
            ]
            
            for pattern in address_patterns:
                match = re.search(pattern, text, re.IGNORECASE | re.DOTALL)
                if match:
                    address = match.group(1).strip()
                    # Clean up
                    address = re.sub(r'(?:‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà|address)[:\s]*', '', address, flags=re.IGNORECASE)
                    if address:
                        info["address"] = address
                        print(f"{prefix} ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: {address[:50]}...")
                        break
            
            # ‡∏´‡∏≤‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
            if is_recipient:
                print(f"{prefix} üéØ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á...")
                
                # Layer 1: ‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
                if info["address"]:
                    province = self.extract_province_from_text(info["address"])
                    if province:
                        info["province"] = province
                        print(f"{prefix} ‚úÖ ‡∏û‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: '{province}'")
                
                # Layer 2: ‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                if not info["province"]:
                    province = self.extract_province_from_text(text)
                    if province:
                        info["province"] = province
                        print(f"{prefix} ‚úÖ ‡∏û‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: '{province}'")
                
                # Layer 3: ‡∏´‡∏≤‡∏à‡∏≤‡∏Å pattern "‡∏à." ‡∏´‡∏£‡∏∑‡∏≠ "‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"
                if not info["province"]:
                    province_patterns = [
                        r'(?:‡∏à\.|‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î)\s*([^\s\d,]+)',
                    ]
                    for pattern in province_patterns:
                        match = re.search(pattern, text)
                        if match:
                            province_name = match.group(1).strip()
                            province = self.extract_province_from_text(province_name)
                            if province:
                                info["province"] = province
                                print(f"{prefix} ‚úÖ ‡∏û‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏à‡∏≤‡∏Å pattern: '{province}'")
                                break
                
                if not info["province"]:
                    print(f"{prefix} ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö")
            else:
                # ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á: ‡∏´‡∏≤‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÅ‡∏ö‡∏ö‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
                if info["address"]:
                    province = self.extract_province_from_text(info["address"])
                    if province:
                        info["province"] = province
                        print(f"{prefix} ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î: {province}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error parsing person info: {e}")
        
        return info
    
    def extract_data_from_text(self, text: str) -> Dict:
        """‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å text ‡∏ó‡∏µ‡πà OCR ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ"""
        result = {
            "sender": {"name": "", "phone": "", "address": "", "province": ""},
            "recipient": {"name": "", "phone": "", "address": "", "province": ""},
            "tracking_number": ""
        }
        
        try:
            print("\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏¢‡∏Å‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö...")
            
            # ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å
            sender_text, recipient_text = self.smart_split_sender_recipient(text)
            
            # Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡πÑ‡∏î‡πâ
            if sender_text:
                print(f"\nüì§ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡πà‡∏á‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á:")
                print("-" * 60)
                print(sender_text[:200] + "..." if len(sender_text) > 200 else sender_text)
                print("-" * 60)
            
            if recipient_text:
                print(f"\nüì• ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡πà‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö (FOCUS ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà):")
                print("-" * 60)
                print(recipient_text[:200] + "..." if len(recipient_text) > 200 else recipient_text)
                print("-" * 60)
            
            # Extract ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á
            if sender_text:
                result["sender"] = self._extract_person_info(sender_text, is_recipient=False)
            
            # Extract ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö (‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏´‡∏≤‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î)
            if recipient_text:
                result["recipient"] = self._extract_person_info(recipient_text, is_recipient=True)
            
            # Extract tracking number
            tracking_patterns = [
                r'tracking[_\s]*(?:number)?[:\s]*([A-Z0-9]+)',
                r'‡πÄ‡∏•‡∏Ç(?:‡∏û‡∏±‡∏™‡∏î‡∏∏|‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°)?[:\s]*([A-Z0-9]+)',
                r'\b([A-Z]{2,}\d{8,})\b'
            ]
            
            for pattern in tracking_patterns:
                match = re.search(pattern, text, re.IGNORECASE)
                if match:
                    result["tracking_number"] = match.group(1).strip()
                    break
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error extracting text: {e}")
            import traceback
            traceback.print_exc()
        
        return result
    
    def process_single_parcel(self, image_path: str, enhance_image: bool = True, 
                             save_to_db: bool = True) -> Dict:
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Database)"""
        print(f"\nüì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏û‡∏±‡∏™‡∏î‡∏∏: {os.path.basename(image_path)}")
        
        result = {
            "success": False,
            "image_file": os.path.basename(image_path),
            "image_path": image_path,
            "tracking_number": None,
            "province": None,
            "region": None,
            "data": None,
            "db_saved": False,
            "db_parcel_id": None,
            "error": None,
            "timestamp": datetime.now().isoformat()
        }
        
        try:
            # 1. ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏†‡∏≤‡∏û‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            processed_image = image_path
            if enhance_image:
                print("üì∏ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏†‡∏≤‡∏û...")
                processed_image = self.preprocessor.enhance_image(image_path)
                print(f"‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            
            # 2. ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ OCR
            print("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ Typhoon Vision OCR...")
            ocr_result = self.ocr.extract_text_from_image(processed_image)
            
            if not ocr_result:
                result["error"] = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ"
                self.stats["failed"] += 1
                print(f"‚ùå {result['error']}")
                return result
            
            # Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• OCR ‡∏î‡∏¥‡∏ö
            print(f"\nüìù OCR Result (raw):")
            print("=" * 60)
            print(ocr_result[:500] + "..." if len(ocr_result) > 500 else ocr_result)
            print("=" * 60)
            
            # 3. ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô JSON
            parcel_data = self.parse_ocr_result(ocr_result)
            
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ JSON ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å text
            if not parcel_data:
                print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö JSON ‡∏à‡∏≤‡∏Å OCR - ‡∏•‡∏≠‡∏á‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å text...")
                
                if isinstance(ocr_result, str):
                    parcel_data = self.extract_data_from_text(ocr_result)
                else:
                    result["error"] = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÑ‡∏î‡πâ"
                    result["raw_ocr"] = ocr_result
                    self.stats["failed"] += 1
                    print(f"‚ùå {result['error']}")
                    return result
            
            # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            if not parcel_data or (not parcel_data.get('sender') and not parcel_data.get('recipient')):
                result["error"] = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÑ‡∏î‡πâ"
                result["raw_ocr"] = ocr_result
                self.stats["failed"] += 1
                print(f"‚ùå {result['error']}")
                return result
            
            # Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å OCR
            print(f"üìÑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ:")
            print(json.dumps(parcel_data, ensure_ascii=False, indent=2))
            
            # 3.5 üéØ ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á JSON
            parcel_data = self.normalize_ocr_json_result(parcel_data)
            
            # 3.6 ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            parcel_data = self.normalize_province_data(parcel_data)
            
            # Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á normalize
            print(f"üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á:")
            print(json.dumps(parcel_data, ensure_ascii=False, indent=2))
            
            # 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á tracking number ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
            tracking = parcel_data.get('tracking_number')
            if not tracking or tracking == "":
                tracking = f"PKG{datetime.now().strftime('%Y%m%d%H%M%S')}"
                parcel_data['tracking_number'] = tracking
            
            # 5. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
            recipient = parcel_data.get('recipient', {})
            province = '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
            
            print("\n" + "="*60)
            print("üéØ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á (‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)")
            print("="*60)
            
            if isinstance(recipient, dict):
                province = recipient.get('province', '')
                
                if province and province != '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏':
                    print(f"‚úÖ ‡∏û‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö: '{province}'")
                else:
                    print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤...")
                    
                    recipient_address = recipient.get('address', '')
                    if recipient_address:
                        print(f"üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö: '{recipient_address[:50]}...'")
                        found_province = self.extract_province_from_text(recipient_address)
                        if found_province:
                            province = found_province
                            recipient['province'] = province
                            print(f"‚úÖ ‡∏û‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö: '{province}'")
                    
                    if not province or province == '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏':
                        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö")
                        province = '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
            else:
                print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {type(recipient)}")
            
            print("="*60)
            
            # 6. ‡∏´‡∏≤‡∏†‡∏≤‡∏Ñ
            region = self.get_region(province)
            print(f"üó∫Ô∏è  ‡∏†‡∏≤‡∏Ñ: '{region}'")
            
            # 7. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
            delivery_route = self.determine_delivery_route(province, region)
            
            # 8. ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            result.update({
                "success": True,
                "tracking_number": tracking,
                "province": province,
                "region": region,
                "delivery_route": delivery_route,
                "data": parcel_data
            })
            
            # 9. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Database (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
            if save_to_db and self.db_api:
                print("\nüíæ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Database...")
                
                db_response = self.db_api.save_parcel_to_db(parcel_data)
                
                if db_response.get('success'):
                    result["db_saved"] = True
                    result["db_parcel_id"] = db_response.get('parcel_id')
                    result["db_sender_id"] = db_response.get('sender_id')
                    result["db_recipient_id"] = db_response.get('recipient_id')
                    self.stats["db_saved"] += 1
                    print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Database ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - Parcel ID: {result['db_parcel_id']}")
                else:
                    result["db_saved"] = False
                    result["db_error"] = db_response.get('message')
                    self.stats["db_failed"] += 1
                    print(f"‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Database ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {result['db_error']}")
            
            # 10. ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
            self.stats["successful"] += 1
            self.stats["by_region"][region] = self.stats["by_region"].get(region, 0) + 1
            self.stats["by_province"][province] = self.stats["by_province"].get(province, 0) + 1
            
            # 11. ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            self.parcels.append(result)
            
            print(f"\n‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:")
            print(f"   üî¢ Tracking: {tracking}")
            print(f"   üìç ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á: {province} ({region})")
            print(f"   üöö ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á: {delivery_route}")
            if result.get("db_saved"):
                print(f"   üíæ Database ID: {result['db_parcel_id']}")
            
        except Exception as e:
            result["error"] = str(e)
            self.stats["failed"] += 1
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            import traceback
            traceback.print_exc()
        
        finally:
            self.stats["total_processed"] += 1
        
        return result
    
    def batch_process(self, image_folder: str, enhance_images: bool = True, 
                     save_to_db: bool = True) -> List[Dict]:
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"""
        results = []
        supported_formats = ('.jpg', '.jpeg', '.png', '.bmp')
        
        print("\n" + "="*60)
        print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        print("="*60)
        
        image_files = [f for f in os.listdir(image_folder) 
                      if f.lower().endswith(supported_formats)]
        
        total_files = len(image_files)
        print(f"üì¶ ‡∏û‡∏ö‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_files} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n")
        
        for idx, filename in enumerate(image_files, 1):
            print(f"\n[{idx}/{total_files}] {filename}")
            print("-" * 60)
            
            image_path = os.path.join(image_folder, filename)
            result = self.process_single_parcel(image_path, enhance_images, save_to_db)
            results.append(result)
        
        return results
    
    def save_individual_json(self, result: Dict) -> Optional[str]:
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"""
        if not result["success"]:
            return None
        
        tracking = result["tracking_number"]
        province = result["province"]
        
        province_folder = os.path.join(self.sorted_folder, province)
        if not os.path.exists(province_folder):
            os.makedirs(province_folder)
        
        filename = f"{tracking}.json"
        filepath = os.path.join(province_folder, filename)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(result, f, ensure_ascii=False, indent=2)
        
        return filepath
    
    def copy_image_to_province_folder(self, result: Dict) -> Optional[str]:
        """‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏û‡∏±‡∏™‡∏î‡∏∏"""
        if not result["success"]:
            return None
        
        province = result["province"]
        image_path = result["image_path"]
        
        province_folder = os.path.join(self.sorted_folder, province)
        if not os.path.exists(province_folder):
            os.makedirs(province_folder)
        
        import shutil
        image_filename = os.path.basename(image_path)
        dest_path = os.path.join(province_folder, image_filename)
        
        try:
            shutil.copy2(image_path, dest_path)
            return dest_path
        except Exception as e:
            print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏†‡∏≤‡∏û: {e}")
            return None
    
    def save_batch_json(self, results: List[Dict], output_file: str = None) -> str:
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏£‡∏ß‡∏°"""
        if output_file is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_file = f"batch_results_{timestamp}.json"
        
        filepath = os.path.join(self.output_folder, output_file)
        
        batch_data = {
            "batch_info": {
                "total_processed": self.stats["total_processed"],
                "successful": self.stats["successful"],
                "failed": self.stats["failed"],
                "db_saved": self.stats["db_saved"],
                "db_failed": self.stats["db_failed"],
                "timestamp": datetime.now().isoformat()
            },
            "statistics": {
                "by_region": self.stats["by_region"],
                "by_province": self.stats["by_province"]
            },
            "parcels": results
        }
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(batch_data, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà: {filepath}")
        return filepath
    
    def generate_sorting_report(self, results: List[Dict]) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô"""
        report = []
        report.append("="*80)
        report.append("üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡πÅ‡∏¢‡∏Å‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏ï‡∏≤‡∏°‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î (‡∏û‡∏£‡πâ‡∏≠‡∏° Database Integration)")
        report.append("="*80)
        report.append(f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        report.append("")
        
        report.append("üìà ‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°")
        report.append("-" * 80)
        report.append(f"‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:        {self.stats['total_processed']} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        report.append(f"‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:    {self.stats['successful']} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        report.append(f"‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {self.stats['failed']} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        
        if self.stats['total_processed'] > 0:
            success_rate = (self.stats['successful'] / self.stats['total_processed']) * 100
            report.append(f"‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:    {success_rate:.2f}%")
        
        report.append(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î:      {len(self.stats['by_province'])} ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î")
        report.append("")
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ Database
        if self.db_api:
            report.append("üíæ ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ Database")
            report.append("-" * 80)
            report.append(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:      {self.stats['db_saved']} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            report.append(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:   {self.stats['db_failed']} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            
            if self.stats['successful'] > 0:
                db_success_rate = (self.stats['db_saved'] / self.stats['successful']) * 100
                report.append(f"‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:    {db_success_rate:.2f}%")
            report.append("")
        
        if self.stats['by_province']:
            report.append("üìç ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏°‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î")
            report.append("-" * 80)
            
            sorted_provinces = sorted(self.stats['by_province'].items(), 
                                     key=lambda x: x[1], reverse=True)
            
            for province, count in sorted_provinces:
                percentage = (count / self.stats['successful']) * 100 if self.stats['successful'] > 0 else 0
                bar = "‚ñà" * min(int(percentage / 2), 40)
                region = self.get_region(province)
                report.append(f"{province:20s} ({region:15s}) {count:3d} ‡∏û‡∏±‡∏™‡∏î‡∏∏ {bar} {percentage:5.1f}%")
            
            report.append("")
        
        if self.stats['by_region']:
            report.append("üó∫Ô∏è  ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏Ñ")
            report.append("-" * 80)
            
            for region in sorted(self.stats['by_region'].keys()):
                count = self.stats['by_region'][region]
                percentage = (count / self.stats['successful']) * 100 if self.stats['successful'] > 0 else 0
                bar = "‚ñà" * int(percentage / 2)
                report.append(f"{region:30s} {count:3d} ‡∏û‡∏±‡∏™‡∏î‡∏∏ {bar} {percentage:5.1f}%")
            
            report.append("")
        
        report.append("="*80)
        
        return "\n".join(report)
    
    def save_report(self, results: List[Dict], output_file: str = None):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô"""
        if output_file is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_file = f"sorting_report_{timestamp}.txt"
        
        filepath = os.path.join(self.output_folder, output_file)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(self.generate_sorting_report(results))
        
        print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {filepath}")
        return filepath


def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Database)"""
    from os import getenv
    from dotenv import load_dotenv
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .env
    load_dotenv()
    
    # API Keys ‡πÅ‡∏•‡∏∞ Configuration
    TYPHOON_API_KEY = getenv("TYPHOON_API_KEY")
    DB_API_URL = getenv("DB_API_URL", "http://localhost/test/data.php")  # URL ‡∏Ç‡∏≠‡∏á PHP API
    DB_API_KEY = getenv("DB_API_KEY", "your_secure_api_key_here")  # API Key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö authentication
    
    OUTPUT_FOLDER = "parcel_results"
    IMAGE_FOLDER = "parcel_images"
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key
    if not TYPHOON_API_KEY:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö TYPHOON_API_KEY")
        print("üí° ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤:")
        print("   export TYPHOON_API_KEY='your_typhoon_api_key'")
        return
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    print("="*60)
    print("üöÄ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏±‡∏î‡πÅ‡∏¢‡∏Å‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£ (NLP + Database)")
    print("="*60)
    print(f"üìÅ Image Folder: {IMAGE_FOLDER}")
    print(f"üìÅ Output Folder: {OUTPUT_FOLDER}")
    print(f"üåê Database API: {DB_API_URL}")
    print(f"üîë Database API Key: {'*' * len(DB_API_KEY) if DB_API_KEY else 'Not Set'}")
    print("="*60)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏†‡∏≤‡∏û
    if not os.path.exists(IMAGE_FOLDER):
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {IMAGE_FOLDER}")
        print(f"üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡∏†‡∏≤‡∏û‡∏û‡∏±‡∏™‡∏î‡∏∏")
        return
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Database
    system = CompleteParcelSortingSystem(
        typhoon_api_key=TYPHOON_API_KEY,
        output_folder=OUTPUT_FOLDER,
        db_api_url=DB_API_URL,
        db_api_key=DB_API_KEY
    )
    
    # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Database)
    results = system.batch_process(
        image_folder=IMAGE_FOLDER,
        enhance_images=True,
        save_to_db=True  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô False ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Database
    )
    
    print("\nüíæ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏û‡∏±‡∏™‡∏î‡∏∏...")
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å JSON ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏†‡∏≤‡∏û
    for result in results:
        if result["success"]:
            system.save_individual_json(result)
            system.copy_image_to_province_folder(result)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ Database
    print(f"\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Database:")
    print(f"   ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {system.stats['db_saved']} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    print(f"   ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {system.stats['db_failed']} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
    system.save_batch_json(results)
    print("\n" + system.generate_sorting_report(results))
    system.save_report(results)
    
    print("\n‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")
    print(f"\nüìÇ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô: {OUTPUT_FOLDER}/")
    print(f"üìÇ ‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î: {OUTPUT_FOLDER}/sorted_by_province/")


if __name__ == "__main__":
    main()